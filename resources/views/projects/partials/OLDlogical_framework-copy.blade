<div class="mb-4 card">
    <div class="card-header">
        <h4 class="mb-0">Solution Analysis: Logical Framework</h4>
    </div>
    <div class="card-body" id="objectives-container">
        <!-- Objective Template -->
        <div class="mb-3 objective-card" id="objective-template" style="display: none;">
            <div class="objective-header d-flex justify-content-between align-items-center">
                <h5>Objective <span class="objective-number"></span></h5>
            </div>
            <textarea name="objectives[0][objective]" class="mb-3 form-control objective-description" rows="2" placeholder="Enter Objective" style="background-color: #202ba3;"></textarea>

            <div class="results-container">
                <!-- Result Section -->
                <div class="mb-3 result-section">
                    <div class="result-header d-flex justify-content-between align-items-center">
                        <h6>Results / Outcome</h6>
                        <button type="button" class="btn btn-danger btn-sm" onclick="removeResult(this)">Remove Result</button>
                    </div>
                    <textarea name="objectives[0][results][0][result]" class="mb-3 form-control result-outcome" rows="2" placeholder="Enter Result" style="background-color: #202ba3;"></textarea>
                </div>
                <!-- Button to add more Results -->
                <button type="button" class="mb-3 btn btn-primary" onclick="addResult(this)">Add Result</button>

                <!-- Risks Section -->
                <div class="risks-container">
                    <div class="mb-3 risk-section">
                        <div class="risk-header d-flex justify-content-between align-items-center">
                            <h6>Risks</h6>
                            <button type="button" class="btn btn-danger btn-sm" onclick="removeRisk(this)">Remove Risk</button>
                        </div>
                        <textarea name="objectives[0][results][0][risks][0][risk]" class="mb-3 form-control risk-description" rows="2" placeholder="Enter Risk" style="background-color: #202ba3;"></textarea>
                        <button type="button" class="mb-3 btn btn-primary" onclick="addRisk(this)">Add Risk</button>
                    </div>
                </div>
            </div>

            <!-- Activities Table -->
            <div class="activities-container">
                <h6>Activities and Means of Verification</h6>
                <table class="table table-bordered activities-table">
                    <thead>
                        <tr>
                            <th scope="col" style="width: 40%;">Activities</th>
                            <th scope="col">Means of Verification</th>
                            <th scope="col" style="width: 10%;">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Activity Template -->
                        <tr class="activity-row">
                            <td>
                                <textarea name="objectives[0][activities][0][activity]" class="form-control activity-description" rows="2" style="background-color: #202ba3;" oninput="syncActivityDescription(this)"></textarea>
                            </td>
                            <td>
                                <textarea name="objectives[0][activities][0][verification]" class="form-control activity-verification" rows="2" style="background-color: #202ba3;"></textarea>
                            </td>
                            <td><button type="button" class="btn btn-danger btn-sm" onclick="removeActivity(this)">Remove</button></td>
                        </tr>
                    </tbody>
                </table>
                <button type="button" class="mb-3 btn btn-primary" onclick="addActivity(this)">Add Activity</button>
            </div>

            <!-- Time Frame Card -->
            <div class="mt-4 card time-frame-card">
                <div class="card-header">
                    <h6>Time Frame for Activities</h6>
                </div>
                <div class="card-body">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th scope="col" style="width: 40%;">Activities</th>
                                @foreach(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'] as $monthAbbreviation)
                                    <th scope="col">{{ $monthAbbreviation }}</th>
                                @endforeach
                                <th scope="col" style="width: 6%;">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="activity-timeframe-row">
                                <td class="activity-description-text"></td>
                                @for($month = 1; $month <= 12; $month++)
                                    <td>
                                        <input type="checkbox" class="month-checkbox" value="1">
                                    </td>
                                @endfor
                                <td><button type="button" class="btn btn-danger btn-sm" onclick="removeTimeFrameRow(this)">Remove</button></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <!-- End of Objective Template -->

        <!-- Objective Controls -->
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-primary" onclick="addObjective()">Add Objective</button>
            <button type="button" class="btn btn-danger" onclick="removeLastObjective()">Remove Last Objective</button>
        </div>
    </div>
</div>

<script>

let objectiveCount = 0;

document.addEventListener('DOMContentLoaded', function() {
    addObjective(); // Initialize with one objective card
});
// test
function beforeSubmit() {
    const objectives = document.querySelectorAll('.objective-card textarea');
    objectives.forEach((textarea) => {
        console.log(`${textarea.name}: ${textarea.value}`);
    });
}


function addObjective() {
    const container = document.getElementById('objectives-container');
    const objectiveTemplate = document.getElementById('objective-template').cloneNode(true);
    objectiveTemplate.style.display = '';
    objectiveTemplate.id = '';
    objectiveTemplate.querySelector('.objective-number').innerText = ++objectiveCount;

    updateNameAttributes(objectiveTemplate, objectiveCount - 1);

    container.insertBefore(objectiveTemplate, container.lastElementChild.previousElementSibling);
}

function removeLastObjective() {
    const objectives = document.querySelectorAll('.objective-card');
    if (objectives.length > 1) {
        objectives[objectives.length - 1].remove();
        objectiveCount--;
        updateObjectiveNumbers();
    }
}

function addResult(button) {
    const resultTemplate = button.closest('.results-container').querySelector('.result-section').cloneNode(true);
    resultTemplate.querySelector('textarea.result-outcome').value = '';

    button.closest('.results-container').insertBefore(resultTemplate, button);

    updateNameAttributes(button.closest('.objective-card'), objectiveCount - 1);
}

function removeResult(button) {
    const resultSection = button.closest('.result-section');
    if (resultSection.parentNode.querySelectorAll('.result-section').length > 1) {
        resultSection.remove();
        updateNameAttributes(resultSection.closest('.objective-card'), objectiveCount - 1);
    }
}

function addActivity(button) {
    const activitiesTable = button.closest('.activities-container').querySelector('tbody');
    const activityRow = activitiesTable.querySelector('.activity-row').cloneNode(true);
    activityRow.querySelector('textarea.activity-description').value = '';
    activityRow.querySelector('textarea.activity-verification').value = '';
    activitiesTable.appendChild(activityRow);

    // Clone the corresponding time frame row
    const timeFrameCard = button.closest('.objective-card').querySelector('.time-frame-card tbody');
    const timeFrameRow = timeFrameCard.querySelector('.activity-timeframe-row').cloneNode(true);
    timeFrameRow.querySelector('.activity-description-text').innerText = '';
    timeFrameCard.appendChild(timeFrameRow);

    // Add input listener for synchronization
    activityRow.querySelector('textarea.activity-description').addEventListener('input', function() {
        const index = Array.from(activitiesTable.querySelectorAll('.activity-row')).indexOf(activityRow);
        timeFrameCard.querySelectorAll('.activity-timeframe-row')[index].querySelector('.activity-description-text').innerText = this.value;
    });

    updateNameAttributes(button.closest('.objective-card'), objectiveCount - 1);
}

function removeActivity(button) {
    const row = button.closest('tr');
    const activityIndex = Array.from(row.parentNode.children).indexOf(row);
    row.remove();

    // Remove corresponding timeframe row
    const timeFrameCard = button.closest('.objective-card').querySelector('.time-frame-card tbody');
    const timeframeRow = timeFrameCard.children[activityIndex];
    timeframeRow.remove();

    updateNameAttributes(button.closest('.objective-card'), objectiveCount - 1);
}

function addRisk(button) {
    const riskSection = button.closest('.risk-section').cloneNode(true);
    riskSection.querySelector('textarea.risk-description').value = '';

    button.closest('.risks-container').appendChild(riskSection);

    updateNameAttributes(riskSection.closest('.objective-card'), objectiveCount - 1);
}

function removeRisk(button) {
    const riskSection = button.closest('.risk-section');
    if (riskSection.parentNode.querySelectorAll('.risk-section').length > 1) {
        riskSection.remove();
        updateNameAttributes(riskSection.closest('.objective-card'), objectiveCount - 1);
    }
}

function removeTimeFrameRow(button) {
    const row = button.closest('tr');
    const activityIndex = Array.from(row.parentNode.children).indexOf(row);
    row.remove();

    // Remove corresponding activity row
    const activitiesTable = button.closest('.objective-card').querySelector('.activities-table tbody');
    const activityRow = activitiesTable.children[activityIndex];
    activityRow.remove();

    updateNameAttributes(button.closest('.objective-card'), objectiveCount - 1);
}

function syncActivityDescription(inputElement) {
    const activityRow = inputElement.closest('tr');
    const activityDescription = inputElement.value;
    const timeFrameRow = activityRow.closest('.objective-card').querySelector('.time-frame-card tbody').children;
    const activityIndex = Array.from(activityRow.parentNode.children).indexOf(activityRow);
    timeFrameRow[activityIndex].querySelector('.activity-description-text').innerText = activityDescription;
}

function updateObjectiveNumbers() {
    const objectives = document.querySelectorAll('.objective-card');
    objectives.forEach((objective, index) => {
        objective.querySelector('.objective-number').innerText = index + 1;
        updateNameAttributes(objective, index);
    });
}


// function updateNameAttributes(objectiveCard, objectiveIndex) {
//     const resultSections = objectiveCard.querySelectorAll('.result-section');
//     resultSections.forEach((result, resultIndex) => {
//         result.querySelector('textarea.result-outcome').name = `objectives[${objectiveIndex}][results][${resultIndex}][result]`;

//         const activities = objectiveCard.querySelectorAll('.activities-table .activity-row');
//         const timeframes = objectiveCard.querySelector('.time-frame-card tbody').children;
//         activities.forEach((activity, activityIndex) => {
//             activity.querySelector('textarea.activity-description').name = `objectives[${objectiveIndex}][activities][${activityIndex}][activity]`;
//             activity.querySelector('textarea.activity-verification').name = `objectives[${objectiveIndex}][activities][${activityIndex}][verification]`;

//             const monthCheckboxes = timeframes[activityIndex].querySelectorAll('.month-checkbox');
//             monthCheckboxes.forEach((checkbox, month) => {
//                 checkbox.name = `objectives[${objectiveIndex}][activities][${activityIndex}][months][${month + 1}]`;
//             });

//             // Sync activity description to time frame row
//             timeframes[activityIndex].querySelector('.activity-description-text').innerText = activity.querySelector('textarea.activity-description').value;
//         });

//         const risks = result.querySelectorAll('.risk-section textarea.risk-description');
//         risks.forEach((risk, riskIndex) => {
//             risk.name = `objectives[${objectiveIndex}][results][${resultIndex}][risks][${riskIndex}][risk]`;
//         });
//     });
// }



//function updateNameAttributes(objectiveCard, objectiveIndex) {
    // Update the name attributes for results within each objective
//    const resultSections = objectiveCard.querySelectorAll('.result-section');
//    resultSections.forEach((result, resultIndex) => {
        // Update the name attribute for each result description
//        result.querySelector('textarea.result-outcome').name = `objectives[${objectiveIndex}][results][${resultIndex}][result]`;

        // Update the name attributes for activities associated with each result
//        const activities = objectiveCard.querySelectorAll('.activities-table .activity-row');
//        const timeframes = objectiveCard.querySelector('.time-frame-card tbody').children;
//        activities.forEach((activity, activityIndex) => {
            // Update the name attributes for each activity description and verification
//            activity.querySelector('textarea.activity-description').name = `objectives[${objectiveIndex}][activities][${activityIndex}][activity]`;
//            activity.querySelector('textarea.activity-verification').name = `objectives[${objectiveIndex}][activities][${activityIndex}][verification]`;

            // Update the name attributes for month checkboxes associated with each activity
//            const monthCheckboxes = timeframes[activityIndex].querySelectorAll('.month-checkbox');
//            monthCheckboxes.forEach((checkbox, month) => {
//                checkbox.name = `objectives[${objectiveIndex}][activities][${activityIndex}][months][${month}]`;
//            });

            // Synchronize the activity description in the time frame table
//            if (timeframes[activityIndex]) {
//                timeframes[activityIndex].querySelector('.activity-description-text').innerText = activity.querySelector('textarea.activity-description').value;
//            }
//        });

        // Update the name attributes for risks associated with each result
//        const risks = result.querySelectorAll('.risk-section textarea.risk-description');
//        risks.forEach((risk, riskIndex) => {
//            risk.name = `objectives[${objectiveIndex}][results][${resultIndex}][risks][${riskIndex}][risk]`;
//        });
//    });

//    console.log(`Updated names for objective ${objectiveIndex + 1}`);
//}

function beforeSubmit() {
    const formData = new FormData(document.querySelector('form'));
    formData.forEach((value, key) => {
        console.log(`${key}: ${value}`);
    });
}

function updateNameAttributes(objectiveCard, objectiveIndex) {
    const resultSections = objectiveCard.querySelectorAll('.result-section');
    resultSections.forEach((result, resultIndex) => {
        result.querySelector('textarea.result-outcome').name = `objectives[${objectiveIndex}][results][${resultIndex}][result]`;

        const activities = objectiveCard.querySelectorAll('.activities-table .activity-row');
        const timeframes = objectiveCard.querySelector('.time-frame-card tbody').children;
        activities.forEach((activity, activityIndex) => {
            activity.querySelector('textarea.activity-description').name = `objectives[${objectiveIndex}][activities][${activityIndex}][activity]`;
            activity.querySelector('textarea.activity-verification').name = `objectives[${objectiveIndex}][activities][${activityIndex}][verification]`;

            const monthCheckboxes = timeframes[activityIndex].querySelectorAll('.month-checkbox');
            monthCheckboxes.forEach((checkbox, month) => {
                checkbox.name = `objectives[${objectiveIndex}][activities][${activityIndex}][months][${month}]`;
            });

            if (timeframes[activityIndex]) {
                timeframes[activityIndex].querySelector('.activity-description-text').innerText = activity.querySelector('textarea.activity-description').value;
            }
        });

        const risks = result.querySelectorAll('.risk-section textarea.risk-description');
        risks.forEach((risk, riskIndex) => {
            risk.name = `objectives[${objectiveIndex}][results][${resultIndex}][risks][${riskIndex}][risk]`;
        });
    });
}

</script>
