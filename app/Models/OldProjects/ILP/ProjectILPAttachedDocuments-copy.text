<?php

namespace App\Models\OldProjects\ILP;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use App\Models\OldProjects\Project;
use Illuminate\Support\Facades\Storage;

class ProjectILPAttachedDocuments extends Model
{
    use HasFactory;

    protected $table = 'project_ILP_attached_docs';

    protected $fillable = [
        'ILP_doc_id',
        'project_id',
        'aadhar_doc',
        'request_letter_doc',
        'purchase_quotation_doc',
        'other_doc',
    ];

    protected static function boot()
    {
        parent::boot();

        static::creating(function ($model) {
            $model->ILP_doc_id = $model->generateILPDocId();
        });
    }

    private function generateILPDocId()
    {
        $latest = self::latest('id')->first();
        $sequenceNumber = $latest ? intval(substr($latest->ILP_doc_id, -4)) + 1 : 1;
        return 'ILP-DOC-' . str_pad($sequenceNumber, 4, '0', STR_PAD_LEFT);
    }

    /**
     * Define a relationship with the Project model.
     * This links the `project_id` in this model to the `project_id` in the `Project` model.
     */


    /**
     * Handle the file upload and storage process for the ILP attached documents.
     */
    public static function handleDocuments($request, $projectId)
    {
        // The array we used in the Blade partial
        $fields = [
            'aadhar_doc' => 'aadhar',
            'request_letter_doc' => 'request_letter',
            'purchase_quotation_doc' => 'purchase_quotation',
            'other_doc' => 'other',
        ];

        // Our correct path (already correct)
        // $projectDir = "project_attachments/ILP/{$projectId}";
        $projectDir = "public/project_attachments/ILP/{$projectId}";

        // Create the directory if not exists
        Storage::makeDirectory($projectDir);

        // Create or update record
        $documents = self::updateOrCreate(['project_id' => $projectId], []);

        // Iterate each field
        foreach ($fields as $field => $shortName) {
            // We must check "attachments.$field" because the Blade uses `attachments[field_name]`
            if ($request->hasFile("attachments.$field")) {
                $file = $request->file("attachments.$field");

                // Additional logging to confirm we found the file
                \Log::info("handleDocuments: Found file for $field", [
                    'original_name' => $file->getClientOriginalName(),
                    'size' => $file->getSize(),
                ]);

                $fileName = "{$projectId}_{$shortName}." . $file->getClientOriginalExtension();

                // Attempt to storeAs
                $filePath = $file->storeAs($projectDir, $fileName);

                // Additional logging for the path
                \Log::info("handleDocuments: Stored $field at $filePath");

                // Save path to DB
                $documents->{$field} = $filePath;
            } else {
                \Log::info("handleDocuments: No file found for $field");
            }
        }

        $documents->save();
        return $documents;
    }
    /**
     * Extract the file name from a given path.
     */
    public function getFileName($field)
    {
        if ($this->$field) {
            return basename($this->$field);
        }
        return null;
    }

}



